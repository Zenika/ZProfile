version: 2.1

orbs:
  cypress: cypress-io/cypress@1

executors:
  node:
    docker:
      - image: circleci/node
  hasura:
    docker:
      - image: circleci/node
      - image: postgres:12
        name: postgres
        environment:
          POSTGRES_PASSWORD: postgrespassword
      - image: hasura/graphql-engine:v1.3.2.cli-migrations-v2
        name: hasura
        environment:
          HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
          HASURA_GRAPHQL_ADMIN_SECRET: key
  docker:
    docker:
      - image: docker:stable

jobs:
  hasura-test-apply-migrations:
    executor: hasura
    steps:
      - checkout
      - run:
          name: "install hasura cli"
          command: sudo npm i -g hasura-cli
      - run:
          name: "wait for Hasura for a minute max"
          command: dockerize -wait tcp://hasura:8080 -timeout 1m
      - run:
          name: migrate
          working_directory: hasura
          command: hasura migrate apply --endpoint http://hasura:8080
      - run:
          name: metadata
          working_directory: hasura
          command: hasura metadata apply --endpoint http://hasura:8080
      - run:
          name: seeds
          working_directory: hasura
          command: hasura seeds apply --endpoint http://hasura:8080
  install-dependencies:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-packaging-dependencies-{{ checksum "package-lock.json" }}
            - v3-packaging-dependencies-
      - run:
          name: install-dependencies
          command: npm ci
      - save_cache:
          paths:
            - node_modules
          key: v3-packaging-dependencies-{{ checksum "package-lock.json" }}
  qc-prettier:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-packaging-dependencies-{{ checksum "package-lock.json" }}
            - v3-packaging-dependencies-
      - run:
          name: qc-prettier
          command: npm run prettier:check
  build:
    executor: node
    parameters:
      graphql-url:
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-packaging-dependencies-{{ checksum "package-lock.json" }}
            - v3-packaging-dependencies-
      - run:
          name: build
          command: NEXT_PUBLIC_GRAPHQL_URL=<< parameters.graphql-url >> npm run build
  unit-test:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-packaging-dependencies-{{ checksum "package-lock.json" }}
            - v3-packaging-dependencies-
      - run:
          name: unit-test
          command: npm run test:unit
  deploy-hasura:
    parameters:
      hasura-deploy-dir:
        type: string
        default: ../hasura
      hasura-clever-app-id:
        type: string
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run:
          name: Package Hasura
          command: |
            mkdir --parents << parameters.hasura-deploy-dir >>
            cp ./hasura.Dockerfile << parameters.hasura-deploy-dir >>/Dockerfile
      - run:
          name: Deploy Hasura
          working_directory: << parameters.hasura-deploy-dir >>
          command: |
            git config --global user.email "dsi@zenika.com"
            git config --global user.name "Zenika"
            git init
            git add .
            git commit -m "deploy!"
            sudo npm install --global clever-tools
            clever login --secret=$CLEVER_SECRET --token=$CLEVER_TOKEN
            clever link << parameters.hasura-clever-app-id >>
            clever deploy --force
  run-migrations:
    docker:
      - image: hasura/graphql-engine:v1.3.2.cli-migrations-v2
    parameters:
      hasura-admin-secret:
        type: string
      hasura-endpoint:
        type: string
    steps:
      - checkout
      - run:
          name: Apply migrations
          working_directory: hasura
          command: hasura-cli migrate apply --admin-secret << parameters.hasura-admin-secret >> --endpoint << parameters.hasura-endpoint >>
      - run:
          name: Apply metadata
          working_directory: hasura
          command: hasura-cli metadata apply --admin-secret << parameters.hasura-admin-secret >> --endpoint << parameters.hasura-endpoint >>

workflows:
  qc-test-deploy:
    jobs:
      - hasura-test-apply-migrations
      - install-dependencies
      - qc-prettier:
          requires:
            - install-dependencies
      - build:
          requires:
            - install-dependencies
          graphql-url: $NEXT_STAGING_PUBLIC_GRAPHQL_URL
      - unit-test:
          requires:
            - install-dependencies
      - cypress/install:
          cache-key: >-
            v3-packaging-dependencies-cypress-{{ checksum "package-lock.json" }}
      # - cypress/run:
      #     name: chrome-cypress-run
      #     requires:
      #       - cypress/install
      #     cache-key: >-
      #       v3-packaging-dependencies-cypress-{{ checksum "package-lock.json" }}
      #     start: npm run dev
      #     wait-on: "http://localhost:3000"
      #     executor: cypress/browsers-chrome78-ff70
      #     browser: chrome
      #     parallel: true
      #     parallelism: 2
      # - cypress/run:
      #     name: firefox-cypress-run
      #     requires:
      #       - cypress/install
      #     cache-key: >-
      #       v3-packaging-dependencies-cypress-{{ checksum "package-lock.json" }}
      #     start: npm run dev
      #     wait-on: "http://localhost:3000"
      #     executor: cypress/browsers-chrome78-ff70
      #     browser: firefox
      #     parallel: true
      #     parallelism: 2
      - deploy-hasura:
          name: deploy-hasura-staging
          hasura-clever-app-id: app_dd676b9a-5e95-4bab-9e21-ba6f9582e12b
          requires:
            - qc-prettier
            - build
            - unit-test
            - hasura-test-apply-migrations
          context: clever-cloud2-zenika-dev
          # filters: &deploy-staging-filters
          #   branches:
          #     only: master
      - run-migrations:
          name: run-migrations-staging
          hasura-admin-secret: $HASURA_ADMIN_SECRET_STAGING
          hasura-endpoint: $HASURA_ENDPOINT_STAGING
          requires:
            - deploy-hasura-staging
          # filters: *deploy-staging-filters
